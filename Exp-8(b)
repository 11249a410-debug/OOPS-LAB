*/
--------------------------------------------------------------------------------------------------------------------
Experiment 8(b)
Allocating and deallocating a dynamic array
--------------------------------------------------------------------------------------------------------------------
Aim:
To demonstrate how to dynamically allocate and deallocate memory for an
array using pointers in C++.
--------------------------------------------------------------------------------------------------------------------
Algorithm:
Declare a pointer for the data type of the array elements.
Use the new operator to allocate memory for the desired size of the array dynamically.
Accept or assign values to each element in the dynamically allocated array.
Access and display the values from the array.
Use the delete[] operator to deallocate the memory for the array.
Set the pointer to nullptr to prevent dangling pointer issues.
--------------------------------------------------------------------------------------------------------------------
Code:
#include <iostream>
using namespace std;

int main() {
    int* arr;       // Pointer declaration for array
    int n;

    cout << "Enter the size of the array: ";
    cin >> n;

    arr = new int[n];  // Dynamic memory allocation for array

    cout << "Enter " << n << " elements:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];  // Assign values
    }

    cout << "Array elements are: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";  // Display values
    }
    cout << endl;

    delete[] arr;    // Deallocate array memory
    arr = nullptr;   // Prevent dangling pointer

    return 0;
}
-------------------------------------------------------------------------------------------------------------------
output:
Enter the size of the array: 5
Enter 5 elements:
10 20 30 40 50
Array elements are: 10 20 30 40 50
-------------------------------------------------------------------------------------------------------------------
Result:
The program dynamically allocates memory for an integer array of user-defined size,
allows input of elements, displays them, and then properly deallocates the allocated memory to avoid memory leaks. 
This shows how dynamic arrays can be managed efficiently in C++.
